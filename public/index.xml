<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>000yesnt.github.io</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on 000yesnt.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>yesnt (CC BY 4.0)</copyright>
    <lastBuildDate>Thu, 17 Apr 2025 22:24:34 -0300</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tips for extremely low-end homeservers</title>
      <link>http://localhost:1313/posts/low-end-homeserver/</link>
      <pubDate>Thu, 24 Apr 2025 18:12:04 -0300</pubDate>
      <guid>http://localhost:1313/posts/low-end-homeserver/</guid>
      <description>By low end, I mean ancient hardware. For example, my &amp;ldquo;NAS&amp;rdquo; with an Intel Pentium E5400.&#xA;This post is more of a list of resources for squeezing a little bit extra power out of obsolete hardware, though some of these tips will work for modern constrained devices like Raspberry Pis. I might update this as I find more useful tips.&#xA;ZRAM as Swap You can trade some CPU power for additional &amp;ldquo;RAM&amp;rdquo; with ZRAM.</description>
      <content:encoded><![CDATA[<p>By low end, I mean <em>ancient</em> hardware. For example, my &ldquo;NAS&rdquo; with an Intel Pentium E5400.</p>
<p>This post is more of a list of resources for squeezing a little bit extra power out of obsolete hardware, though some of these tips will work for modern constrained devices like Raspberry Pis. I might update this as I find more useful tips.</p>
<h1 id="zram-as-swap">ZRAM as Swap</h1>
<p>You can trade some CPU power for additional &ldquo;RAM&rdquo; with ZRAM. Depending on the kind of services you&rsquo;ll be hosting, this may be a viable option to squeeze more services into the same hardware.</p>
<ul>
<li><a href="https://wiki.archlinux.org/title/Zram">ZRAM on the Arch Linux wiki</a>. I recommend at least checking out the section on <a href="https://wiki.archlinux.org/title/Zram#Optimizing_swap_on_zram">optimizing swap on ZRAM</a> even if you&rsquo;re not using an Arch distro.</li>
<li><a href="https://wiki.debian.org/ZRam">Setting up ZRAM on Debian-based distros</a></li>
</ul>
<p>While it might be tempting to make a huge ZRAM partition, doing that might <em>degrade</em> system stability, rather than improve it. Keeping too much data in ZRAM will cause additional latency and excessive CPU usage.</p>
<p>In my setup, I use ZRAM and SSD swaps, both with the same size (2GB). I found that it&rsquo;s a good balance between compressed memory and CPU usage. YMMV.</p>
<h1 id="small-stuff">Small stuff</h1>
<ul>
<li>Use the latest kernel version available on your distro&rsquo;s repositories.</li>
<li>Use Wireguard (or Tailscale) as your VPN. They&rsquo;re crazy fast. I haven&rsquo;t seen anyone with a homelab use anything other than those two in a long time, but I thought I&rsquo;d mention it anyway.</li>
<li>If you can avoid using Nextcloud, do so. If you <em>really</em> like <a href="https://web.archive.org/web/20250414202236/https://wiki.futo.org/index.php/Introduction_to_a_Self_Managed_Life:_a_13_hour_%26_28_minute_presentation_by_FUTO_software#Nextcloud_Notes_to_replace_Google_Keep">a specific feature</a>, go ahead, but I wouldn&rsquo;t use it for anything more.</li>
</ul>
<h1 id="microoptimizations">Microoptimizations</h1>
<p>This section is for stuff that either didn&rsquo;t work or had minimal impact on performance/throughput.</p>
<h2 id="forcing-nginx-to-use-chacha20">Forcing NGINX to use ChaCha20</h2>
<p>It&rsquo;s theoretically faster than AES on devices without AES-NI. I&rsquo;ve only tested this on the latest Debian Testing NGINX version at the time of writing (1.26.3).</p>





<pre tabindex="0"><code># Microoptimization: force ChaCha20 whenever possible, since I don&#39;t have AES-NI
ssl_ciphers &#34;ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384&#34;;
ssl_conf_command Options PrioritizeChaCha;
ssl_conf_command Ciphersuites TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384;
ssl_prefer_server_ciphers on;</code></pre><p>It kinda sorta worked, but the bandwidth improvement was so small it&rsquo;s not worth it.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Properly backing up Docker Seafile&#39;s database</title>
      <link>http://localhost:1313/posts/backing-up-docker-seafile/</link>
      <pubDate>Thu, 17 Apr 2025 22:21:53 -0300</pubDate>
      <guid>http://localhost:1313/posts/backing-up-docker-seafile/</guid>
      <description>I wrote this post before I moved away from Seafile. I won&amp;rsquo;t be updating it, but the commands here should still work as long as Seafile continues to use MySQL/MariaDB.&#xA;The Seafile Admin Manual recommends using the following commands to backup your database container:&#xA;cd /backup/databases docker exec -it seafile-mysql mariadb-dump -u[username] -p[password] --opt ccnet_db &amp;gt; ccnet_db.sql docker exec -it seafile-mysql mariadb-dump -u[username] -p[password] --opt seafile_db &amp;gt; seafile_db.sql docker exec -it seafile-mysql mariadb-dump -u[username] -p[password] --opt seahub_db &amp;gt; seahub_db.</description>
      <content:encoded><![CDATA[<p><em>I wrote this post before I moved away from Seafile. I won&rsquo;t be updating it, but the commands here
should still work as long as Seafile continues to use MySQL/MariaDB.</em></p>
<hr>
<p>The Seafile Admin Manual <a href="https://manual.seafile.com/latest/administration/backup_recovery/#backing-up-database">recommends using the following commands</a> to backup your database container:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>cd /backup/databases
</span></span><span style="display:flex;"><span>docker exec -it seafile-mysql mariadb-dump  -u<span style="color:#f92672">[</span>username<span style="color:#f92672">]</span> -p<span style="color:#f92672">[</span>password<span style="color:#f92672">]</span> --opt ccnet_db &gt; ccnet_db.sql
</span></span><span style="display:flex;"><span>docker exec -it seafile-mysql mariadb-dump  -u<span style="color:#f92672">[</span>username<span style="color:#f92672">]</span> -p<span style="color:#f92672">[</span>password<span style="color:#f92672">]</span> --opt seafile_db &gt; seafile_db.sql
</span></span><span style="display:flex;"><span>docker exec -it seafile-mysql mariadb-dump  -u<span style="color:#f92672">[</span>username<span style="color:#f92672">]</span> -p<span style="color:#f92672">[</span>password<span style="color:#f92672">]</span> --opt seahub_db &gt; seahub_db.sql</span></span></code></pre></div><p>This works, and creates full backups for the main Seafile databases, but there are a few caveats you should be aware of:</p>
<ol>
<li>Original character sets are not saved. <strong>This can cause files with Unicode names to be inacessible</strong>, as well as a few other nasty errors and side effects.</li>
<li>It does not save the MySQL/MariaDB users. This is fine for the root user, but you&rsquo;ll have to manually create the db user after restoring.</li>
<li>You&rsquo;ll have to run a lot of commands to copy, restore and configure a fresh database container.</li>
</ol>
<p>While points 2 and 3 are likely nitpicks, they are still important to me as, in the event of a catastrophic failure that requires a full restore, I&rsquo;d rather spend as little of my own time and effort on recovery as possible.</p>
<h1 id="how-i-do-it">How I do it</h1>
<p>I do not care about whatever benefits splitting the dump in three provides. If <em>any</em> of the databases become corrupted, I think it&rsquo;s a better idea to start fresh instead of possibly causing an invalid, desynced state between databases.</p>
<p>To backup all databases (including the internal <code>mysql</code> database containing user data) to one file, this is the command I use:</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>docker exec -it seafile-mysql mariadb-dump -h --username<span style="color:#f92672">=</span>root --password<span style="color:#f92672">=[</span>root_password<span style="color:#f92672">]</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        --opt <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        --default-character-set<span style="color:#f92672">=</span>utf8mb4 <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        --skip-set-charset <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        --all-databases <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        --events <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        --routines <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        --triggers <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>        --flush-privileges <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    &gt; /path/to/your/seafile-backup.sql.<span style="color:#e6db74">`</span>date +<span style="color:#e6db74">&#34;%Y-%m-%d-%H-%M-%S&#34;</span><span style="color:#e6db74">`</span></span></span></code></pre></div><p>(Make sure to change <code>mariadb-dump</code> to <code>mysqldump</code> if you&rsquo;re using an older Seafile version!)</p>
<p>What each option does:</p>
<ul>
<li><code>--default-character-set=utf8mb4 --skip-set-charset</code>: Sets the default character set to UTF-8 and suppresses charset reconversion, preventing bugs with Unicode names;</li>
<li><code>--all-databases --events --routines --triggers</code>: Self-explanatory. Gets all databases, their events, routines and triggers;</li>
<li><code>--flush-privileges</code>: Required whenever the dump contains the <code>mysql</code> database (implied by <code>--all-databases</code>). Sends a <code>FLUSH PRIVILEGES</code> statement to the database at the end of the dump.</li>
</ul>
<p>The dump will have the current date appended to it.</p>
<h2 id="recovering">Recovering</h2>
<p>Import it like any other mysql dump.</p>





<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>docker cp /path/to/your/seafile-backup.sql.2025-04-17-22-21-53 seafile-mysql:/tmp/seafile.sql
</span></span><span style="display:flex;"><span>docker exec -it seafile-mysql /bin/sh -c <span style="color:#e6db74">&#34;mysql -uroot -p[password] &lt; /tmp/seafile.sql&#34;</span></span></span></code></pre></div>]]></content:encoded>
    </item>
  </channel>
</rss>
